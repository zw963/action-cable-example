#!/usr/bin/env bash

# This is an RVM Project .rvmrc file, used to automatically load the ruby
# development environment upon cd'ing into the directory

# First we specify our desired <ruby>[@<gemset>], the @gemset name is optional,
# Only full ruby name is supported here, for short names use:
#     echo "rvm use 2.2.4@ershou_web" > .rvmrc

environment_id="ruby-2.2.4@action-cable-example"

# Uncomment the following lines if you want to verify rvm version per project
# rvmrc_rvm_version="1.27.0 (latest)" # 1.10.1 seems like a safe start
# eval "$(echo ${rvm_version}.${rvmrc_rvm_version} | __rvm_awk -F. '{print "[[ "$1*65536+$2*256+$3" -ge "$4*65536+$5*256+$6" ]]"}' )" || {
#   echo "This .rvmrc file requires at least RVM ${rvmrc_rvm_version}, aborting loading."
#   return 1
# }

# First we attempt to load the desired environment directly from the environment
# file. This is very fast and efficient compared to running through the entire
# CLI and selector. If you want feedback on which environment was used then
# insert the word 'use' after --create as this triggers verbose mode.
if [[ -d "${rvm_path:-$HOME/.rvm}/environments"
  && -s "${rvm_path:-$HOME/.rvm}/environments/$environment_id" ]]
then
  \. "${rvm_path:-$HOME/.rvm}/environments/$environment_id"
  for __hook in "${rvm_path:-$HOME/.rvm}/hooks/after_use"*
  do
    if [[ -f "${__hook}" && -x "${__hook}" && -s "${__hook}" ]]
    then \. "${__hook}" || true
    fi
  done
  unset __hook
  if (( ${rvm_use_flag:=1} >= 1 )) # display automatically
  then
    if [[ $- == *i* ]] # check for interactive shells
    then printf "%b" "Using: $(tput setaf 2 2>/dev/null)$GEM_HOME$(tput sgr0 2>/dev/null)\n" # show the user the ruby and gemset they are using in green
    else printf "%b" "Using: $GEM_HOME\n" # don't use colors in non-interactive shells
    fi
  fi
else
  # If the environment file has not yet been created, use the RVM CLI to select.
  rvm --create use  "$environment_id" || {
    echo "Failed to create RVM environment '${environment_id}'."
    return 1
  }
fi

# If you use bundler, this might be useful to you:
# if [[ -s Gemfile ]] && {
#   ! builtin command -v bundle >/dev/null ||
#   builtin command -v bundle | GREP_OPTIONS="" \command \grep $rvm_path/bin/bundle >/dev/null
# }
# then
#   printf "%b" "The rubygem 'bundler' is not installed. Installing it now.\n"
#   gem install bundler
# fi
# if [[ -s Gemfile ]] && builtin command -v bundle >/dev/null
# then
#   bundle install | GREP_OPTIONS="" \command \grep -vE '^Using|Your bundle is complete'
# fi

export DCNAME_PG=ershou_web.pg_master.5432
export DBNAME_PG=action-cable-example_development
export DCNAME_REDIS=ershou_web.queue_server.6380
export staging=action-cable-example@app.sg.ershouweb.test.xthinkapp.com
export production=action-cable-example@app.sg.mymart.com
alias ssh1='command ssh -o ServerAliveInterval=100 $staging'
alias ssh2='command ssh -o ServerAliveInterval=100 $production'
alias log1='command ssh -o ServerAliveInterval=100 $staging "tail -f /data_1/www/ershou_web/ershou_web_staging/current/log/*"'
alias log2='command ssh -o ServerAliveInterval=100 $production "tail -f /mnt/data_disk_1/www/ershou_web/ershou_web_production/current/log/*"'
alias drop1='command ssh -o ServerAliveInterval=100 $staging "docker restart $DCNAME_PG;cd /data_1/www/ershou_web/ershou_web_staging/current; RAILS_ENV=staging bundle exec rake db:drop db:create db:migrate db:seed"'
alias console1='command ssh -o ServerAliveInterval=100 $staging "cd /data_1/www/ershou_web/ershou_web_staging/current; RAILS_ENV=staging bundle exec rails c"'
alias console2='command ssh -o ServerAliveInterval=100 $production "cd /mnt/data_disk_1/www/ershou_web/ershou_web_production/current; RAILS_ENV=production bundle exec rails c"'
